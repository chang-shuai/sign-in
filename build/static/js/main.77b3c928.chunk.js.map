{"version":3,"sources":["storage.js","Show.js","Home.js","UnFound.js","Drag.js","Check.js","Calen.js","RouterMap.js","App.js","serviceWorker.js","index.js"],"names":["sessionStore","get","name","storage","window","sessionStorage","JSON","parse","e","set","obj","stringify","del","removeItem","clear","Show","props","getColumnSearchProps","dataIndex","filterDropdown","setSelectedKeys","selectedKeys","confirm","clearFilters","style","padding","ref","node","searchInput","placeholder","value","onChange","target","onPressEnter","handleSearch","width","marginBottom","display","type","onClick","icon","size","marginRight","handleReset","filterIcon","filtered","color","undefined","onFilter","record","toString","toLowerCase","includes","onFilterDropdownVisibleChange","visible","setTimeout","select","render","text","highlightStyle","backgroundColor","searchWords","state","searchText","autoEscape","textToHighlight","setState","dumpToCalen","history","push","tableData","store","to","React","Component","Home","workbook","isRedirect","WithRouterShow","withRouter","this","UnFound","Dragger","Drag","accept","multiple","showUploadList","customRequest","file","reader","FileReader","onload","data","result","XLSX","read","sheetNames","SheetNames","worksheet","Sheets","wkJson","utils","sheet_to_json","readAsBinaryString","className","check","dateStr","signDate","moment","startDate","year","month","day","date","hour","minute","second","millisecond","endtDate","Calen","getListData","map","item","replace","filter","content","dateCellRender","listData","key","status","bind","match","params","RouterMap","WithRouterDrag","exact","from","path","component","App","Boolean","location","hostname","locale","config","zhCN","ReactDOM","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.77b3c928.chunk.js","sourcesContent":["/**\r\n * localStorage工具\r\n */\r\nconst localStore = {\r\n  get(name) {\r\n    const storage = window.localStorage[name]\r\n    try {\r\n      return JSON.parse(storage)\r\n    } catch (e) {\r\n      return storage\r\n    }\r\n  },\r\n  set(name, obj) {\r\n    window.localStorage[name] = JSON.stringify(obj)\r\n  },\r\n  del(name) {\r\n    window.localStorage.removeItem(name)\r\n  },\r\n  clear() {\r\n    window.localStorage.clear()\r\n  }\r\n}\r\n\r\n/**\r\n * sessionStorage工具\r\n */\r\nconst sessionStore = {\r\n  get(name) {\r\n    const storage = window.sessionStorage[name]\r\n    try {\r\n      return JSON.parse(storage)\r\n    } catch (e) {\r\n      return storage\r\n    }\r\n  },\r\n  set(name, obj) {\r\n    window.sessionStorage[name] = JSON.stringify(obj)\r\n  },\r\n  del(name) {\r\n    window.sessionStorage.removeItem(name)\r\n  },\r\n  clear() {\r\n    window.sessionStorage.clear()\r\n  }\r\n}\r\n\r\nexport {localStore, sessionStore}","import React from 'react'\r\nimport { Redirect } from 'react-router-dom';\r\nimport { Input, Button, Icon } from 'antd';\r\nimport Highlighter from 'react-highlight-words';\r\nimport { sessionStore as store } from './storage'\r\n\r\n\r\n\r\nclass Show extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {tableData: store.get('workbook')};\r\n    }\r\n\r\n    getColumnSearchProps = dataIndex => ({\r\n      filterDropdown: ({ setSelectedKeys, selectedKeys, confirm, clearFilters }) => (\r\n        <div style={{ padding: 8 }}>\r\n          <Input\r\n            ref={node => {\r\n              this.searchInput = node;\r\n            }}\r\n            placeholder={`搜索 ${dataIndex}`}\r\n            value={selectedKeys[0]}\r\n            onChange={e => setSelectedKeys(e.target.value ? [e.target.value] : [])}\r\n            onPressEnter={() => this.handleSearch(selectedKeys, confirm)}\r\n            style={{ width: 188, marginBottom: 8, display: 'block' }}\r\n          />\r\n          <Button\r\n            type=\"primary\"\r\n            onClick={() => this.handleSearch(selectedKeys, confirm)}\r\n            icon=\"search\"\r\n            size=\"small\"\r\n            style={{ width: 90, marginRight: 8 }}\r\n          >\r\n            搜索\r\n          </Button>\r\n          <Button onClick={() => this.handleReset(clearFilters)} size=\"small\" style={{ width: 90 }}>\r\n            复位\r\n          </Button>\r\n        </div>\r\n      ),\r\n      filterIcon: filtered => (\r\n        <Icon type=\"search\" style={{ color: filtered ? '#1890ff' : undefined }} />\r\n      ),\r\n      onFilter: (value, record) =>\r\n        record[dataIndex]\r\n          .toString()\r\n          .toLowerCase()\r\n          .includes(value.toLowerCase()),\r\n      onFilterDropdownVisibleChange: visible => {\r\n        if (visible) {\r\n          setTimeout(() => this.searchInput.select());\r\n        }\r\n      },\r\n      render: text => (\r\n        <Highlighter\r\n          highlightStyle={{ backgroundColor: '#ffc069', padding: 0 }}\r\n          searchWords={[this.state.searchText]}\r\n          autoEscape\r\n          textToHighlight={text.toString()}\r\n        />\r\n      ),\r\n    });\r\n  \r\n    handleSearch = (selectedKeys, confirm) => {\r\n      confirm();\r\n      this.setState({ searchText: selectedKeys[0] });\r\n    };\r\n  \r\n    handleReset = clearFilters => {\r\n      clearFilters();\r\n      this.setState({ searchText: '' });\r\n    };\r\n\r\n    dumpToCalen = () => {\r\n      this.props.history.push()\r\n    };\r\n\r\n    render() {\r\n      // const columns = [\r\n      //   {\r\n      //     title: '登记号码',\r\n      //     dataIndex: '登记号码',\r\n      //     key: '登记号码',\r\n      //     render: text => <Button type=\"link\" >{text}</Button>,\r\n      //     // ...this.getColumnSearchProps('登记号码'),\r\n      //   },\r\n      //   {\r\n      //     title: '姓名',\r\n      //     dataIndex: '姓名',\r\n      //     key: '姓名',\r\n      //     render: text => <Link to={{pathname:`/Calen/`+text}} >{text}</Link>,\r\n      //     // ...this.getColumnSearchProps('姓名'),\r\n      //   },\r\n      //   {\r\n      //     title: '出勤时间',\r\n      //     dataIndex: '出勤时间',\r\n      //     key: '出勤时间',\r\n      //     // render: text => \r\n      //   }\r\n      // ];  \r\n\r\n        return (\r\n          <Redirect to='/Calen/常帅'></Redirect>\r\n          // <Table columns={columns} dataSource={this.state.tableData} pagination={{defaultPageSize:40}}></Table>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Show;","import React from 'react';\r\nimport { Redirect, withRouter } from 'react-router-dom'\r\nimport {sessionStore as store} from './storage';\r\nimport Show from './Show';\r\n\r\nclass Home extends React.Component {\r\n    constructor(props) {\r\n        super(props)\r\n        this.workbook = store.get('workbook')\r\n        if (!this.workbook) {\r\n            this.state = {isRedirect : true}\r\n        } else {\r\n            this.state = {isRedirect : false}\r\n        }\r\n    }\r\n\r\n    render() {\r\n        const WithRouterShow = withRouter(Show);\r\n        if (this.state.isRedirect) {\r\n            return <Redirect to=\"/Drag\" ></Redirect>\r\n        } else {\r\n            return (\r\n                <div>\r\n                    <WithRouterShow></WithRouterShow>\r\n                </div>\r\n            )\r\n        }\r\n    }\r\n}\r\n\r\nexport default Home;","import React from 'react';\r\n\r\nclass UnFound extends React.Component {\r\n    render() {\r\n        return (\r\n            <p>404页面</p>\r\n        )\r\n    }\r\n}\r\n\r\nexport default UnFound;","import React from 'react'\r\nimport { Upload, Icon } from 'antd';\r\nimport XLSX from 'xlsx'\r\nimport  {sessionStore as store}  from './storage'\r\nconst { Dragger } = Upload;\r\n\r\n\r\nclass Drag extends React.Component {\r\n  \r\n\r\n  render() {\r\n    const props = {\r\n      accept: '.xls,.xlsx',\r\n      name: 'file',\r\n      multiple: false,\r\n      showUploadList: false,\t\r\n      customRequest : ({file}) => {\r\n        const reader = new FileReader();\r\n        reader.onload = (e) => {\r\n            const data = e.target.result;\r\n            const workbook = XLSX.read(data, {type: 'binary'});\r\n            const sheetNames = workbook.SheetNames; // 工作表名称集合\r\n            const worksheet = workbook.Sheets[sheetNames[0]]; // 这里我们只读取第一张sheet\r\n            const wkJson = XLSX.utils.sheet_to_json(worksheet);\r\n            store.set(\"workbook\", wkJson);\r\n            this.props.history.push('/Home');\r\n          };\r\n        reader.readAsBinaryString(file);\r\n        \r\n      },\r\n    };\r\n\r\n    return (\r\n      <Dragger {...props}>\r\n          <p className=\"ant-upload-drag-icon\">\r\n          <Icon type=\"inbox\" />\r\n          </p>\r\n          <p className=\"ant-upload-text\">单击或者将文件拖拽到此处上传</p>\r\n          <p className=\"ant-upload-hint\">\r\n            仅支持单个文件\r\n          </p>\r\n      </Dragger>\r\n    )\r\n  }\r\n}\r\n\r\nexport default Drag;","import moment from 'moment';\r\n\r\nfunction check(dateStr) {\r\n    const signDate = moment(dateStr)\r\n    const startDate = moment({ year :signDate.year, month :signDate.month, day :signDate.date, hour :8, minute :30, second :0, millisecond :0})\r\n    const endtDate = moment({ year :signDate.year, month :signDate.month, day :signDate.date, hour :17, minute :30, second :0, millisecond :0})\r\n    if (signDate > startDate || signDate < endtDate) {\r\n        return false\r\n    } else {\r\n        return true\r\n    }\r\n}\r\n\r\nexport default check;","import { Calendar, Badge } from 'antd';\r\nimport React from 'react';\r\nimport './Calen.css'\r\nimport {sessionStore as store} from './storage'\r\nimport moment from 'moment';\r\nimport check from './Check';\r\n\r\nclass Calen extends React.Component {\r\n    constructor(props) {\r\n        super(props)\r\n        this.state = {}\r\n        this.dateCellRender.bind(this)\r\n    }\r\n\r\n    getListData = (value, name) => {\r\n      const workbook = store.get('workbook');\r\n      let listData = workbook.map( (item) => {\r\n          item['出勤时间'] = item['出勤时间'].replace(/\\s*星期[一二三四五六日]\\s*/, ' ')\r\n          return item\r\n      })\r\n      listData = workbook.filter((item) => {\r\n        if (item['姓名']===name) {\r\n          return true\r\n        }\r\n        return false\r\n      })\r\n      \r\n      listData = listData.filter( (item) => {\r\n        const signDate = moment(item['出勤时间'])\r\n        if (signDate.date() === value.date() && signDate.month() === value.month()) {\r\n          return true\r\n        } else {\r\n          return false\r\n        }\r\n      })\r\n\r\n      listData = listData.map( (item) => {\r\n        const dateStr = item['出勤时间']\r\n        if (check(dateStr)) {\r\n          return {type: 'success', content: dateStr}\r\n        } else {\r\n          return {type: 'error', content: dateStr}\r\n\r\n        }\r\n      })\r\n\r\n      return listData || [];\r\n    }\r\n    \r\n    dateCellRender = (value) => {\r\n      const listData = this.getListData(value, this.name);\r\n      return (\r\n        <ul className=\"events\">\r\n          {listData.map(item => (\r\n            <li key={item.content}>\r\n              <Badge status={item.type} text={item.content} />\r\n            </li>\r\n          ))}\r\n        </ul>\r\n      );\r\n    }\r\n  \r\n\r\n    render() {\r\n      this.name = this.props.match.params.name;\r\n      return (\r\n          <div>\r\n            <h2>{this.name}</h2>\r\n            <Calendar dateCellRender={this.dateCellRender}  />\r\n          </div>\r\n      )\r\n    }\r\n    \r\n}\r\n\r\nexport default Calen;","import React from 'react';\r\nimport {HashRouter, Route, Switch, withRouter, Redirect} from 'react-router-dom';\r\nimport Home from './Home';\r\nimport UnFound from './UnFound';\r\nimport Drag from './Drag';\r\nimport Calen from './Calen';\r\n\r\nclass RouterMap extends React.Component {\r\n    render() {\r\n        const WithRouterDrag = withRouter(Drag)\r\n        return (\r\n            <HashRouter>\r\n                <Switch>\r\n                    <Redirect exact from='/' to='/Drag'/>\r\n                    <Route exact path='/Drag' component={WithRouterDrag} />\r\n                    <Route exact path='/Home' component={Home} />\r\n                    <Route exact path='/Calen/:name' component={Calen} />\r\n                    <Route path='*' component={UnFound} />\r\n                </Switch>\r\n            </HashRouter>    \r\n        )\r\n    }\r\n}\r\n\r\nexport default RouterMap;","import React from 'react'\r\nimport RouterMap from './RouterMap'\r\nimport './App.css';\r\nclass App extends React.Component {\r\n  render() {\r\n    return (\r\n      <div className='App-header'>\r\n        <h2>考勤记录查询</h2>\r\n        <RouterMap></RouterMap>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\n// import './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport { ConfigProvider } from 'antd';\r\nimport zhCN from 'antd/es/locale/zh_CN';\r\nimport moment from 'moment';\r\nimport 'moment/locale/zh-cn';\r\nmoment.locale('zh-cn');\r\n\r\nconst config = {\r\n    locale: zhCN\r\n};\r\nReactDOM.render(\r\n    <ConfigProvider {...config}>\r\n        <App />\r\n    </ConfigProvider>, \r\n    document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}